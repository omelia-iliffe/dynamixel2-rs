use std::ops::Add;
use std::thread;
use std::time::Duration;
use dynamixel2::{Bus, Device, ReadError, Response, SerialPort};
use serial2::SerialPort as _;

fn setup_logs() {
	let _ = env_logger::builder().parse_default_env().try_init();
}


mod mock_serial_port;
use crate::mock_serial_port::MockSerialPort;
type ReadBuffer = Vec<u8>;
type WriteBuffer = Vec<u8>;
type T = MockSerialPort;

// fn setup_bus() -> Bus<Vec<u8>, Vec<u8>, SerialPort> {
// 	Bus::open("/dev/ttyUSB0", 57600).unwrap()
// }

enum Packet {
    Write(Vec<u8>),
    Response(Vec<u8>)

}

#[test]
fn id_inspection() {
    setup_logs();
	let writes = [
		Packet::Write(vec![0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x03, 0x00, 0x08, 0x07, 0x42,]),
        Packet::Write(vec![0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C,]),
        Packet::Response(vec![0xFF, 0xFF, 0xFD, 0x00, 0x02, 0x09, 0x00, 0x55, 0x00, 0xF6, 0x47, 0xA3, 0xEE, 0xFD, 0xFF, 0xB3,]),
        Packet::Write(vec![0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C,]),
        Packet::Response(vec![0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x09, 0x00, 0x55, 0x00, 0xA8, 0x44, 0x55, 0x23, 0xC7, 0xB8, 0x16,]),
        Packet::Response(vec![0xFF, 0xFF, 0xFD, 0x00, 0x02, 0x09, 0x00, 0x55, 0x00, 0xFC, 0x47, 0x94, 0x36, 0x3A, 0xFE, 0xE1,]),
        Packet::Write(vec![0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C,]),
	];

    let data = vec![0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x03, 0x00, 0x08, 0x07, 0x42, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C, 0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x09, 0x00, 0x55, 0x00, 0xF6, 0x44, 0xA9, 0x4F, 0x54, 0xB4, 0x6A, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C, 0xFE, 0xFF, 0xFD, 0x00, 0x02, 0x09, 0x00, 0x55, 0x00, 0xCF, 0x47, 0xDF, 0x0D, 0x3E, 0x72, 0x76, 0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x09, 0x00, 0x55, 0x00, 0xAA, 0x44, 0x48, 0xF9, 0xD9, 0xA7, 0x4B, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C, 0xFF, 0xFF, 0xFD, 0x00, 0x02, 0x09, 0x00, 0x55, 0x00, 0x35, 0x47, 0x47, 0xE0, 0x51, 0x4C, 0x3B, 0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x09, 0x00, 0x55, 0x00, 0x95, 0x44, 0x97, 0x85, 0xDE, 0x17, 0x47, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C, 0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x09, 0x00, 0x55, 0x00, 0xF7, 0x44, 0x07, 0xD3, 0x84, 0x7D, 0xA8, 0xFE, 0xFF, 0xFD, 0x00, 0x02, 0x09, 0x00, 0x55, 0x00, 0x19, 0x47, 0x3C, 0xE8, 0x74, 0xED, 0x80, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0xC4, 0xCD, 0x02, 0x8E, 0x01, 0x17, 0x4C, 0xFE, 0xFF, 0xFD, 0x00, 0x02, 0x09, 0x00, 0x55, 0x00, 0x3B, 0x47, 0x54, 0x25, 0x27, 0xD8, 0xA7, 0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x09, 0x00, 0x55, 0x00, 0xF4, 0x44, 0x0D, 0x33, 0xC8, 0xDA, 0x69, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x08, 0x00, 0xC4, 0xCD, 0x02, 0x8D, 0x00, 0xC8, 0x05, 0x62, 0xFF, 0xFF, 0xFD, 0x00, 0x02, 0x09, 0x00, 0x55, 0x00, 0xF2, 0xF3, 0x76, 0x19, 0x74, 0x14, 0x9D, 0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x09, 0x00, 0x55, 0x00, 0x4C, 0x46, 0xCC, 0xE1, 0x76, 0x05, 0x16, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xEF, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xEA, 0xE4, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x00, 0xB9, 0xDA, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x41, 0x00, 0x01, 0xBC, 0x5A, 0xFE, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x06, 0x00, 0x03, 0x40, 0x00, 0x00, 0xFD, 0x64, 0xFF, 0xFF, 0xFD, 0x00, 0x03, 0x04, 0x00, 0x55, 0x00, 0x52, 0x8C, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x06, 0x00, 0x03, 0x40, 0x00, 0x00, 0xAE, 0x5A, 0xFF, 0xFF, 0xFD, 0x00, 0xB6, 0x04, 0x00, 0x55, 0x00, 0x49, 0x39, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x0B, 0x00, 0x83, 0x07, 0x00, 0x01, 0x00, 0x03, 0x01, 0xB6, 0x02, 0x4D, 0x85, 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x03, 0x00, 0x08, 0x07, 0x42];

    let serial_port = MockSerialPort::new(56700);
    let device_serial_port = serial_port.device_port();
    let mut bus =  Bus::with_buffers(serial_port.clone(), vec![0; 1024], vec![0; 1024]).unwrap();
    let mut device = Device::with_buffers(device_serial_port, vec![0; 1024], vec![0; 1024]).unwrap();
    serial_port.write_buffer.lock().unwrap().extend(&data);
    loop {
        match device.read(Duration::from_millis(50)) {
            Ok(p) =>  {
                dbg!(&p);
            },
            Err(ReadError::Io(e)) if MockSerialPort::is_timeout_error(&e) => panic!("Timeout while reading device serial port"),
            Err(e) => {dbg!(e);},
        }
    }
    // for d in writes {
    //     match d {
    //         Packet::Write(d) | Packet::Response(d) => {
    //             serial_port.write_buffer.lock().unwrap().extend(&d);
    //             let r = device.read(Duration::from_millis(50));
    //             println!("{:#?}",&r);
    //         },
    //         // Packet::Response(d) => {
    //         //     serial_port.read_buffer.lock().unwrap().extend(&d);
    //         //     let r: Result<Response<Vec<u8>>, _> = bus.read_status_response_timeout(Duration::from_millis(50)).map(Into::into);
    //         //     dbg!(&r);
    //         // }
    //     }
    // }
}

#[test]
fn init_id_inspection() {
    setup_logs();
    let mut bus = Bus::open("/dev/ttyUSB0", 57600).unwrap();
    loop {
        let r = bus.write_instruction(254, 196, 5, |mut buffer| {
            buffer.copy_from_slice(&[205, 2, 141, 0, 200])
        });

        let r: Response<&[u8]> = bus.read_status_response_timeout(Duration::from_secs(5)).unwrap().into();
        dbg!(&r);
        let r: Response<&[u8]> = bus.read_status_response_timeout(Duration::from_secs(5)).unwrap().into();
        dbg!(&r);
        let id = r.motor_id;
        let data = r.data.iter().fold(String::new(), |acc, b| acc.add(&format!("{:#04x}, ", b)));
        let mut ping = Vec::new();

        let _ = bus.scan_cb(|res| {
            dbg!(&res);
            ping.push(res.motor_id)
        });

        if let Some(id) = ping.first() {
            bus.write_u8(*id, 65, 1);
            thread::sleep(Duration::from_millis(1000));
            bus.write_u8(*id, 65, 0);
            thread::sleep(Duration::from_millis(1000));
        }
    }
}

#[test]
fn try_led() {
    let mut bus = Bus::open("/dev/ttyUSB0", 57600).unwrap();
    let r = bus.write_u8(0x47, 65, 1);
}
